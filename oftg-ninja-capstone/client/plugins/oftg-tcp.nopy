__author__ = 'ryan.ohoro'

import socket

from classes.oftgplugin import *


class OFTGTCP(OFTGPacketPlugin):
    INFO = {
        'Title': 'TCP Data',
        'Usage': '',
        'Author': 'Ryan O\'Horo'
    }

    # The PROPERTIES object specifies the parameters required by the plugin
    # and is used to generate the UI for the case configuration

    PROPERTIES = {'portspec':
                      {'Label': 'TCP Port',
                       'Default': '1-65535',
                       'Sample': '23,25,137-139',
                       'Type': 'string'}
    }


    def emitter(self):
        for port in hyphen_range(self.kwargs.get('portspec', self.PROPERTIES['portspec']['Default'])):
            print "TCP target:", self.target, port

            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.sendto(self.payload, (self.target, port))

            sock.close()
        return None

    # The collector function is a filter through which collected packets are
    # sent and emitted packets are identified.

    def collector(self, packet):
        # print 'TCPRaw Analyzed: %s' % packet

        #if re.search('.*OFTG.*', packet):
        #    print 'Collector matched packet: %s' % binascii.hexlify(packet)

        return None



